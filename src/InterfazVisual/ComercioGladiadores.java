/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfazVisual;

import Model.Conex;
import Model.Gladiadores;
import Model.Usuario;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author AlumMati
 */
public class ComercioGladiadores extends javax.swing.JFrame {

    static Connection con = null;
    static Conex pepe = new Conex();
    static ArrayList<Gladiadores> listaGladiadores = new ArrayList<Gladiadores>();
    static DefaultTableModel model = new DefaultTableModel();
    static Usuario user = new Usuario();
    static int gladId = 0;
    static Object datosFila[] = new Object[1];     // 1 porque es una columnas solo, es la tabla..

    public ComercioGladiadores(Usuario user) {
        initComponents();
        this.setLocationRelativeTo(null);
        setIconImage(new ImageIcon(getClass().getResource("../Img/iconoSpartacus.jpg")).getImage());
        this.user = user;
        saldoField.setText(String.valueOf(user.getSaldo()));
        generaTabla();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        infoPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        costField = new javax.swing.JTextField();
        vitField = new javax.swing.JTextField();
        strField = new javax.swing.JTextField();
        agiField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionArea = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        defField = new javax.swing.JTextField();
        backBoton = new javax.swing.JButton();
        buyBoton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        saldoField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("NAME");

        jLabel3.setText("COST");

        jLabel4.setText("STR");

        jLabel5.setText("VIT");

        jLabel6.setText("AGI");

        nameField.setEditable(false);

        costField.setEditable(false);

        vitField.setEditable(false);

        strField.setEditable(false);
        strField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strFieldActionPerformed(evt);
            }
        });

        agiField.setEditable(false);
        agiField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agiFieldActionPerformed(evt);
            }
        });

        descriptionArea.setEditable(false);
        descriptionArea.setColumns(20);
        descriptionArea.setRows(5);
        jScrollPane1.setViewportView(descriptionArea);

        jLabel7.setText("DEF");

        defField.setEditable(false);
        defField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(infoPanelLayout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(infoPanelLayout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(costField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(infoPanelLayout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(strField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(infoPanelLayout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(vitField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(infoPanelLayout.createSequentialGroup()
                                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(agiField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(defField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(costField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(strField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(vitField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(agiField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(defField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(infoPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 30, 260, 330));

        backBoton.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        backBoton.setText("GO BACK");
        backBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBotonActionPerformed(evt);
            }
        });
        getContentPane().add(backBoton, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 370, 240, 60));

        buyBoton.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        buyBoton.setText("BUY");
        buyBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyBotonActionPerformed(evt);
            }
        });
        getContentPane().add(buyBoton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 360, 80, 80));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Gladiators"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.getTableHeader().setReorderingAllowed(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
        }

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 170, 320));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("YOUR GOLD");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 220, 80, 30));

        saldoField.setEditable(false);
        saldoField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saldoFieldActionPerformed(evt);
            }
        });
        getContentPane().add(saldoField, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 260, 80, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/gladiadores.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 460));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void strFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strFieldActionPerformed
        // TODO add your hafhgfhndling code here:
    }//GEN-LAST:event_strFieldActionPerformed

    private void agiFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agiFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_agiFieldActionPerformed

    private void defFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_defFieldActionPerformed

    private void backBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBotonActionPerformed

        MenuUsuario random = new MenuUsuario(user);
        this.setVisible(false);
        random.setVisible(true);
    }//GEN-LAST:event_backBotonActionPerformed

    public static void generaTabla() {

        try {

            // cargo el nombre de todos los gladiadores
            con = pepe.AbrirConexion();
            String query = "Select * from gladiadores where propietario=0";

            PreparedStatement st = con.prepareStatement(query);

            ResultSet rs = st.executeQuery();

            int Id;
            String Nombre;
            String Descripcion;
            int Precio;
            int Victorias;
            int Derrotas;
            int Fuerza;
            int Agilidad;
            int Vitalidad;
            int Defensa;
            int Propietario;

            // llena arraylist de todo el select
            listaGladiadores.clear(); // sino hago esto al volver atras y volver hacia delante vuelve a cargar gladiadores en la lista y habrán duplicados
            while (rs.next()) {

                Id = rs.getInt("id");
                Nombre = rs.getString("nombre");
                Descripcion = rs.getString("descripcion");
                Precio = rs.getInt("precio");
                Victorias = rs.getInt("victorias");
                Derrotas = rs.getInt("derrotas");
                Fuerza = rs.getInt("fuerza");
                Agilidad = rs.getInt("agilidad");
                Vitalidad = rs.getInt("vitalidad");
                Defensa = rs.getInt("defensa");
                Propietario = rs.getInt("propietario");

                Gladiadores glad = new Gladiadores(Id, Nombre, Descripcion, Precio, Victorias, Derrotas, Fuerza, Agilidad, Vitalidad, Defensa, Propietario);

                listaGladiadores.add(glad);

            }
            pepe.CerrarConexion(con);
            st.close();
            rs.close();

            // ahora hago lo de la tabla...
            /*if (model.getRowCount() > 0) {                                                // PENSABA QUE ESTO ERA PARA QUE NO VOLVIERA A CARGAR doblemente la lista pero no, con el clear.arraylist suficiente
                for (int i = model.getRowCount() - 1; i > -1; i--) {
                    model.removeRow(i);
                }
            }*/

            model = (DefaultTableModel) table.getModel();

            for (int i = 0; i < listaGladiadores.size(); i++) {
                datosFila[0] = listaGladiadores.get(i).getNombre();
                model.addRow(datosFila);

            }

        } catch (SQLException ex) {
            Logger.getLogger(ComercioGladiadores.class.getName()).log(Level.SEVERE, null, ex);
        } finally {

        }

    }


    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked

        int row = table.getSelectedRow();
        String tableClick = table.getModel().getValueAt(row, 0).toString();

        for (int i = 0; i < listaGladiadores.size(); i++) {

            if (listaGladiadores.get(i).getNombre().equalsIgnoreCase(tableClick)) {

                nameField.setText(listaGladiadores.get(i).getNombre());
                costField.setText(String.valueOf(listaGladiadores.get(i).getPrecio()));
                strField.setText(String.valueOf(listaGladiadores.get(i).getFuerza()));
                vitField.setText(String.valueOf(listaGladiadores.get(i).getVitalidad()));
                agiField.setText(String.valueOf(listaGladiadores.get(i).getAgilidad()));
                defField.setText(String.valueOf(listaGladiadores.get(i).getDefensa()));
                descriptionArea.setText(listaGladiadores.get(i).getDescripcion());
                gladId = listaGladiadores.get(i).getId();

            }

        }

    }//GEN-LAST:event_tableMouseClicked

    private void buyBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyBotonActionPerformed

        int coste;
        int saldo;

        coste = Integer.parseInt(costField.getText());
        saldo = Integer.parseInt(saldoField.getText());

        if (saldo >= coste) {

            saldo = saldo - coste;
            user.setSaldo(saldo);

            // hago el primer update por ejemplo el del usuario y su saldo
            try {

                con = pepe.AbrirConexion();
                String query = "update usuarios set saldo=? where id=?";
                PreparedStatement st = con.prepareStatement(query);
                st.setInt(1, saldo);
                st.setInt(2, user.getId());
                st.executeUpdate();
                st.close();
                String query2 = "update gladiadores set propietario=? where id=?";
                PreparedStatement st2 = con.prepareStatement(query2);
                st2.setInt(1, user.getId());
                st2.setInt(2, gladId);
                st2.executeUpdate();
                st2.close();
                pepe.CerrarConexion(con);
                // ME HE QEUDADO AQUIIIIIIII lo de abajo no va
                saldoField.setText(String.valueOf(saldo));
                JOptionPane.showMessageDialog(rootPane, "You have bought it sucessfully.");
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(rootPane, "Error en conexion BBDD, buyButtonActionPerfmored");

            }

            //saldoField.setText(String.valueOf(saldo));
            int row = table.getSelectedRow();
            model.removeRow(row);
            //setear los campos a 0
            nameField.setText("");
            costField.setText("");
            strField.setText("");
            vitField.setText("");
            defField.setText("");
            agiField.setText("");
        } else {
            JOptionPane.showMessageDialog(rootPane, "NO TIENES DINERO SUFICIENTE, VE A LA ARENA Y GANA MÁS COMBATES");

        }


    }//GEN-LAST:event_buyBotonActionPerformed

    private void saldoFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saldoFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saldoFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // si ejecuto main peta en el for que recorre para el model
        generaTabla();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField agiField;
    private javax.swing.JButton backBoton;
    private javax.swing.JButton buyBoton;
    private javax.swing.JTextField costField;
    private javax.swing.JTextField defField;
    private javax.swing.JTextArea descriptionArea;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nameField;
    private javax.swing.JTextField saldoField;
    private javax.swing.JTextField strField;
    private static javax.swing.JTable table;
    private javax.swing.JTextField vitField;
    // End of variables declaration//GEN-END:variables
}
